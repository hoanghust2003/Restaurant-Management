import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { UserService } from './user/user.service';
import { MenuItemService } from './menu-item/menu-item.service';
import { TableService } from './table/table.service';
import { OrderService } from './order/order.service';
import { UserRole } from './user/entities/user.entity';
import { MenuItemCategory } from './menu-item/entities/menu-item.entity';
import { TableStatus } from './table/entities/table.entity';
import { OrderStatus } from './order/entities/order.entity';

async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule);

  // L·∫•y c√°c service
  const userService = app.get(UserService);
  const menuItemService = app.get(MenuItemService);
  const tableService = app.get(TableService);
  const orderService = app.get(OrderService);

  console.log('üå± B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu m·∫´u...');

  // T·∫°o ng∆∞·ªùi d√πng m·∫´u
  console.log('üìù T·∫°o ng∆∞·ªùi d√πng...');
  try {
    const admin = await userService.create({
      username: 'admin',
      password: 'admin123',
      fullName: 'Admin User',
      email: 'admin@restaurant.com',
      role: UserRole.ADMIN,
      isActive: true,
    });
    console.log(`‚úÖ ƒê√£ t·∫°o admin: ${admin.username}`);

    await userService.create({
      username: 'manager',
      password: 'manager123',
      fullName: 'Restaurant Manager',
      email: 'manager@restaurant.com',
      role: UserRole.MANAGER,
      isActive: true,
    });

    await userService.create({
      username: 'chef',
      password: 'chef123',
      fullName: 'Chef Master',
      email: 'chef@restaurant.com',
      role: UserRole.CHEF,
      isActive: true,
    });

    await userService.create({
      username: 'waiter',
      password: 'waiter123',
      fullName: 'Service Staff',
      email: 'waiter@restaurant.com',
      role: UserRole.WAITER,
      isActive: true,
    });

    await userService.create({
      username: 'reception',
      password: 'reception123',
      fullName: 'Front Desk',
      email: 'reception@restaurant.com',
      role: UserRole.RECEPTION,
      isActive: true,
    });
  } catch (error) {
    console.log('‚ö†Ô∏è L·ªói khi t·∫°o ng∆∞·ªùi d√πng (c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i):', error.message);
  }

  // T·∫°o b√†n ƒÉn m·∫´u
  console.log('üìù T·∫°o c√°c b√†n ƒÉn...');
  try {
    for (let i = 1; i <= 10; i++) {
      const status = i <= 7 
        ? TableStatus.AVAILABLE 
        : (i === 8 ? TableStatus.OCCUPIED : (i === 9 ? TableStatus.RESERVED : TableStatus.CLEANING));
      
      const capacity = i % 3 === 0 ? 6 : (i % 2 === 0 ? 4 : 2);
      
      const table = await tableService.create({
        tableNumber: `T${i.toString().padStart(2, '0')}`,
        status,
        capacity,
      });
      
      // T·∫°o QR code cho b√†n
      await tableService.generateQRCode(table.id);
      console.log(`‚úÖ ƒê√£ t·∫°o b√†n: ${table.tableNumber} (${table.status})`);
    }
  } catch (error) {
    console.log('‚ö†Ô∏è L·ªói khi t·∫°o b√†n:', error.message);
  }

  // T·∫°o menu items
  console.log('üìù T·∫°o m√≥n ƒÉn...');
  try {
    // Khai v·ªã
    const appetizers = [
      {
        name: 'S√∫p b√≠ ƒë·ªè',
        description: 'S√∫p b√≠ ƒë·ªè kem t∆∞∆°i v·ªõi h·∫°t b√≠ rang',
        price: 65000,
        category: MenuItemCategory.APPETIZER,
        preparationTimeMinutes: 10,
        imageUrl: 'https://example.com/images/pumpkin-soup.jpg',
      },
      {
        name: 'G·ªèi cu·ªën t√¥m th·ªãt',
        description: 'G·ªèi cu·ªën t∆∞∆°i v·ªõi t√¥m, th·ªãt heo, rau th∆°m v√† b√∫n',
        price: 85000,
        category: MenuItemCategory.APPETIZER,
        preparationTimeMinutes: 15,
        imageUrl: 'https://example.com/images/spring-rolls.jpg',
      },
      {
        name: 'Salad Ceasar',
        description: 'Salad tr·ªôn v·ªõi s·ªët Ceasar, b√°nh m√¨ n∆∞·ªõng v√† ph√¥ mai parmesan',
        price: 95000,
        category: MenuItemCategory.APPETIZER,
        preparationTimeMinutes: 10,
        imageUrl: 'https://example.com/images/caesar-salad.jpg',
      },
    ];

    // M√≥n ch√≠nh
    const mainCourses = [
      {
        name: 'B√≤ h·∫ßm r∆∞·ª£u vang',
        description: 'Th·ªãt b√≤ h·∫ßm v·ªõi rau c·ªß v√† r∆∞·ª£u vang ƒë·ªè, d√πng k√®m b√°nh m√¨',
        price: 245000,
        category: MenuItemCategory.MAIN_COURSE,
        preparationTimeMinutes: 30,
        imageUrl: 'https://example.com/images/beef-stew.jpg',
      },
      {
        name: 'C√° h·ªìi n∆∞·ªõng',
        description: 'C√° h·ªìi Na Uy n∆∞·ªõng v·ªõi s·ªët chanh d√¢y, d√πng k√®m khoai t√¢y nghi·ªÅn v√† rau c·ªß',
        price: 235000,
        category: MenuItemCategory.MAIN_COURSE,
        preparationTimeMinutes: 25,
        imageUrl: 'https://example.com/images/salmon.jpg',
      },
      {
        name: 'M·ª≥ √ù s·ªët b√≤ b·∫±m',
        description: 'M·ª≥ Spaghetti v·ªõi s·ªët th·ªãt b√≤ b·∫±m v√† ph√¥ mai parmesan',
        price: 165000,
        category: MenuItemCategory.MAIN_COURSE,
        preparationTimeMinutes: 20,
        imageUrl: 'https://example.com/images/spaghetti.jpg',
      },
      {
        name: 'G√† n∆∞·ªõng l√° chanh',
        description: 'ƒê√πi g√† n∆∞·ªõng v·ªõi l√° chanh v√† s·∫£, d√πng k√®m c∆°m tr·∫Øng v√† rau lu·ªôc',
        price: 185000,
        category: MenuItemCategory.MAIN_COURSE,
        preparationTimeMinutes: 30,
        imageUrl: 'https://example.com/images/lemongrass-chicken.jpg',
        isAvailable: false,
      },
    ];

    // Tr√°ng mi·ªáng
    const desserts = [
      {
        name: 'B√°nh flan',
        description: 'B√°nh flan v·ªã c√† ph√™ v·ªõi caramel',
        price: 65000,
        category: MenuItemCategory.DESSERT,
        preparationTimeMinutes: 5,
        imageUrl: 'https://example.com/images/flan.jpg',
      },
      {
        name: 'Cheesecake chanh d√¢y',
        description: 'B√°nh cheesecake m√°t l·∫°nh v·ªõi s·ªët chanh d√¢y',
        price: 85000,
        category: MenuItemCategory.DESSERT,
        preparationTimeMinutes: 5,
        imageUrl: 'https://example.com/images/cheesecake.jpg',
      },
    ];

    // ƒê·ªì u·ªëng
    const beverages = [
      {
        name: 'Sinh t·ªë b∆°',
        description: 'Sinh t·ªë b∆° m√°t l·∫°nh v·ªõi ƒë∆∞·ªùng th·ªët n·ªët',
        price: 65000,
        category: MenuItemCategory.BEVERAGE,
        preparationTimeMinutes: 5,
        imageUrl: 'https://example.com/images/avocado-smoothie.jpg',
      },
      {
        name: 'C√† ph√™ phin',
        description: 'C√† ph√™ phin truy·ªÅn th·ªëng, ƒë∆∞·ªùng ri√™ng',
        price: 45000,
        category: MenuItemCategory.BEVERAGE,
        preparationTimeMinutes: 8,
        imageUrl: 'https://example.com/images/coffee.jpg',
      },
      {
        name: 'Tr√† hoa c√∫c',
        description: 'Tr√† hoa c√∫c n√≥ng v·ªõi m·∫≠t ong',
        price: 50000,
        category: MenuItemCategory.BEVERAGE,
        preparationTimeMinutes: 5,
        imageUrl: 'https://example.com/images/chamomile-tea.jpg',
      },
    ];

    const allMenuItems = [...appetizers, ...mainCourses, ...desserts, ...beverages];
    
    for (const item of allMenuItems) {
      await menuItemService.create(item);
      console.log(`‚úÖ ƒê√£ t·∫°o m√≥n: ${item.name}`);
    }
  } catch (error) {
    console.log('‚ö†Ô∏è L·ªói khi t·∫°o menu:', error.message);
  }

  // T·∫°o ƒë∆°n h√†ng m·∫´u
  console.log('üìù T·∫°o ƒë∆°n h√†ng m·∫´u...');
  try {
    // L·∫•y t·∫•t c·∫£ menu items ƒë·ªÉ l·∫•y ID
    const allMenuItems = await menuItemService.findAll();
    
    // L·∫•y b√†n c√≥ tr·∫°ng th√°i OCCUPIED
    const occupiedTable = await tableService.findByStatus(TableStatus.OCCUPIED);
    
    if (occupiedTable.length > 0) {
      // T·∫°o ƒë∆°n h√†ng cho b√†n occupied
      const order = {
        tableId: occupiedTable[0].id,
        items: [
          {
            menuItemId: allMenuItems.find(i => i.name === 'S√∫p b√≠ ƒë·ªè')?.id ?? (() => { throw new Error("Menu item 'S√∫p b√≠ ƒë·ªè' not found"); })(),
            quantity: 2,
            notes: '√çt mu·ªëi',
          },
          {
            menuItemId: allMenuItems.find(i => i.name === 'B√≤ h·∫ßm r∆∞·ª£u vang')?.id ?? (() => { throw new Error("Menu item 'B√≤ h·∫ßm r∆∞·ª£u vang' not found"); })(),
            quantity: 1,
            notes: '',
          },
          {
            menuItemId: allMenuItems.find(i => i.name === 'C√† ph√™ phin')?.id ?? (() => { throw new Error("Menu item 'C√† ph√™ phin' not found"); })(),
            quantity: 2,
            notes: 'Kh√¥ng ƒë∆∞·ªùng',
          },
        ],
        specialInstructions: 'Kh√°ch VIP - Ph·ª•c v·ª• nhanh',
      };

      await orderService.create(order);
      console.log('‚úÖ ƒê√£ t·∫°o ƒë∆°n h√†ng cho b√†n occupied');
    }

    // T·∫°o th√™m ƒë∆°n h√†ng cho m·ªôt b√†n available (sau ƒë√≥ b√†n n√†y s·∫Ω chuy·ªÉn th√†nh occupied)
    const availableTables = await tableService.findByStatus(TableStatus.AVAILABLE);
    
    if (availableTables.length > 0) {
      const order = {
        tableId: availableTables[0].id,
        items: [
          {
            menuItemId: allMenuItems.find(i => i.name === 'G·ªèi cu·ªën t√¥m th·ªãt')?.id ?? (() => { throw new Error("Menu item 'G·ªèi cu·ªën t√¥m th·ªãt' not found"); })(),
            quantity: 1,
            notes: '',
          },
          {
            menuItemId: allMenuItems.find(i => i.name === 'M·ª≥ √ù s·ªët b√≤ b·∫±m')?.id ?? (() => { throw new Error("Menu item 'M·ª≥ √ù s·ªët b√≤ b·∫±m' not found"); })(),
            quantity: 1,
            notes: 'Nhi·ªÅu ph√¥ mai',
          },
          {
            menuItemId: allMenuItems.find(i => i.name === 'B√°nh flan')?.id ?? (() => { throw new Error("Menu item 'B√°nh flan' not found"); })(),
            quantity: 1,
            notes: '',
          },
          {
            menuItemId: allMenuItems.find(i => i.name === 'Sinh t·ªë b∆°')?.id ?? (() => { throw new Error("Menu item 'Sinh t·ªë b∆°' not found"); })(),
            quantity: 1,
            notes: '√çt ƒë√°',
          },
        ],
        specialInstructions: '',
      };

      await orderService.create(order);
      console.log('‚úÖ ƒê√£ t·∫°o ƒë∆°n h√†ng cho b√†n available');
    }

    // T·∫°o th√™m m·ªôt ƒë∆°n h√†ng v·ªõi tr·∫°ng th√°i IN_PROGRESS ƒë·ªÉ test c√°c tr·∫°ng th√°i ƒë∆°n h√†ng
    if (availableTables.length > 1) {
      const order = {
        tableId: availableTables[1].id,
        items: [
          {
            menuItemId: allMenuItems.find(i => i.name === 'Salad Ceasar')?.id ?? (() => { throw new Error("Menu item 'Salad Ceasar' not found"); })(),
            quantity: 1,
            notes: 'Kh√¥ng h√†nh',
          },
          {
            menuItemId: allMenuItems.find(i => i.name === 'C√° h·ªìi n∆∞·ªõng')?.id ?? (() => { throw new Error("Menu item 'C√° h·ªìi n∆∞·ªõng' not found"); })(),
            quantity: 2,
            notes: 'Ch√≠n v·ª´a',
          }
        ],
        specialInstructions: 'Ph·ª•c v·ª• nhanh',
      };

      const createdOrder = await orderService.create(order);
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh ƒëang chu·∫©n b·ªã
      await orderService.updateStatus(createdOrder.id, OrderStatus.IN_PROGRESS);
      console.log('‚úÖ ƒê√£ t·∫°o ƒë∆°n h√†ng IN_PROGRESS');
    }

    // T·∫°o ƒë∆°n h√†ng ƒë√£ ho√†n th√†nh ƒë·ªÉ test l·ªãch s·ª≠
    if (availableTables.length > 2) {
      const order = {
        tableId: availableTables[2].id,
        items: [
          {
            menuItemId: allMenuItems.find(i => i.name === 'Tr√† hoa c√∫c')?.id ?? (() => { throw new Error("Menu item 'Tr√† hoa c√∫c' not found"); })(),
            quantity: 2,
            notes: '',
          }
        ],
        specialInstructions: '',
      };

      const completedOrder = await orderService.create(order);
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh ho√†n th√†nh
      await orderService.updateStatus(completedOrder.id, OrderStatus.COMPLETED);
      console.log('‚úÖ ƒê√£ t·∫°o ƒë∆°n h√†ng ƒë√£ ho√†n th√†nh');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è L·ªói khi t·∫°o ƒë∆°n h√†ng:', error.message);
  }

  console.log('üéâ ƒê√£ t·∫°o d·ªØ li·ªáu m·∫´u th√†nh c√¥ng!');
  
  await app.close();
}

bootstrap();